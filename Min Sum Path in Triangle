/*
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

 Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle. 
*/

int minarr(vector<int> &A){
    int i=0,min=0,l=A.size();
    for(;i<l;i++){
        if(A[i]<A[min]) min=i;
    }
    return A[min];
}
int min(int a,int b){
    if(a<b) return a;
    else return b;
}
int Solution::minimumTotal(vector<vector<int> > &A) {
    for(int i=1,L=A.size();i<L;i++){
        for(int j=0,l=A[i].size();j<l;j++){
            int addit;
            if(j==0) addit=A[i-1][j];
            else if(j==l-1) addit=A[i-1][j-1];
            else addit=min(A[i-1][j-1],A[i-1][j]);
            A[i][j]+=addit;
        }
    }
    return minarr(A[A.size()-1]);
}
