/*
Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 19 is a happy number

12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
*/

class Solution {
public:
int digitSquareSum(int n) {
	int sum = 0, tmp;
	while (n) {
		tmp = n % 10;
		sum += tmp * tmp;
		n /= 10;
	}
	return sum;
}
bool isHappy(int n) {
	int slow, fast;
	slow = fast = n;
	do {
		slow = digitSquareSum(slow);
		fast = digitSquareSum(fast);
		fast = digitSquareSum(fast);
	} while(slow != fast);
	if (slow == 1) return 1;
	else return 0;
}
};

class Solution2 {
public:
    bool isHappy(int n) {
        int res = 0;
        unordered_set<int> hist;
         
        while(true){
            if (n==1) return true;
             
            while (n > 0){
                res += (n%10)*(n%10);
                n = n/10;
            }
             
            if (hist.find(res) != hist.end()){
                return false;
            }else{
                hist.insert(res);
                n = res;
                res = 0;
            }
        }
    }
};
