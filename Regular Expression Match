/*
Implement wildcard pattern matching with support for '?' and '*'.

'?' : Matches any single character.
'*' : Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

The function prototype should be:

int isMatch(const char *s, const char *p)
Examples :

isMatch("aa","a") → 0
isMatch("aa","aa") → 1
isMatch("aaa","aa") → 0
isMatch("aa", "*") → 1
isMatch("aa", "a*") → 1
isMatch("ab", "?*") → 1
isMatch("aab", "c*a*b") → 0
Return 1/0 for this problem.
*/

int Solution::isMatch(const string &s, const string &p) {  
     int i=0,j=0;  
     int star=-1;  
     int si=i;  
     while(i<s.length())  
     {  
       if(j<p.length())  
       {  
         if((p[j]=='?'||p[j]==s[i]))  
         {  
           i++;  
           j++;  
           continue;  
         }  
         if(p[j]=='*')  
         {  
           star=j++;  
           si=i;  
           continue;  
         }  
       }  
       if(star!=-1)  
       {  
         j=star+1;  
         i=++si;  
         continue;  
       }  
       return false;  
     }  
     while(j<p.length()&&p[j]=='*')  
       j+=1;  
     return j==p.length();  
   }  
