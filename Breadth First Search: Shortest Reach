/*
Given an undirected graph consisting of  nodes (labelled  to ) where a specific given node  represents the start position and an edge between any two nodes is of length  units in the graph.

It is required to calculate the shortest distance from start position (Node ) to all of the other nodes in the graph.

Note 1: If a node is unreachable , the distance is assumed as . 
Note 2: The length of each edge in the graph is  units.

Input Format

The first line contains , denoting the number of test cases. 
First line of each test case has two integers , denoting the number of nodes in the graph and , denoting the number of edges in the graph. 
The next  lines each consist of two space separated integers , where  and  denote the two nodes between which the edge exists. 
The last line of a testcase has an integer , denoting the starting position.

Constraints

Output Format

For each of  test cases, print a single line consisting of  space-separated integers, denoting the shortest distances of the N-1 nodes from starting position . This will be done for all nodes same as in the order of input 1 to N.

For unreachable nodes, print .

Sample Input

2
4 2
1 2
1 3
1
3 1
2 3
2
Sample Output

6 6 -1
-1 6
Explanation

For test cases 1:

The graph given in the test case is shown as :

bfs.png

 denotes the node  in the test case and B,C and D denote  and . Since  is the starting node and the shortest distances from it are ( edge,  edge, Infinity) to the nodes B,C and D ( and ) respectively.

Node D is unreachable, hence  is printed (not Infinity).

For test cases 2: There are only one edge  in a graph with 3 nodes, so node  is unreachable from node , and node  has one edge from node , each edge has the length of  units. So we output .
*/

//https://www.hackerrank.com/challenges/bfsshortreach

#include <cmath>
#include <map>
#include <queue>
#include <utility>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
void bfs(vector<pair<int,int>>&edges, vector<int>&done,int start){
    queue<pair<int,int>> points;
    points.push(make_pair(start,0));
    while(!points.empty()){
        pair<int,int>temp=points.front();
        points.pop();
        if(done[temp.first]!=-1) continue;
        done[temp.first]=temp.second;
        for(int i=0,l=edges.size();i<l;i++){
            if(edges[i].first==temp.first){
                points.push(make_pair(edges[i].second,temp.second+6));
            }
            else if(edges[i].second==temp.first){
                points.push(make_pair(edges[i].first,temp.second+6));
            }
        }
    }
}
int main() {
    int t,start,n,m;
    pair<int,int> temp;
    scanf("%d",&t);
    while(t--){
        scanf("%d %d",&n,&m);
        vector<pair<int,int>> edges(m);
        for(int i=0;i<m;i++){
            scanf("%d %d",&temp.first,&temp.second);
            edges[i]=temp;
        }
        scanf("%d",&start);
        vector<int> done(n+1,-1);
        bfs(edges,done,start);
        for(int i=1,l=n+1;i<l;i++){
            if(i==start) continue;
            printf("%d ",done[i]);
        }
        printf("\n");
    }
    return 0;
}
