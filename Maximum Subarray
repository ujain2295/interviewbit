/*
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.
*/

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int currsum=0,maxsum=INT_MIN;
        for(int i=0,l=nums.size();i<l;i++){
            currsum+=nums[i];
            if(currsum<0) currsum=0;
            if(currsum>maxsum) maxsum=currsum;
        }
        if(maxsum==0){
            int maxneg=0;
            for(int i=0,l=nums.size();i<l;i++){
                if(nums[i]>nums[maxneg]) maxneg=i;
            }
            if(nums[maxneg]<0) return nums[maxneg];
        }
        return maxsum;
    }
};
