/*
Given a binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path does not need to go through the root.

For example:
Given the below binary tree,

       1
      / \
     2   3
Return 6.
*/

class Solution {
public:
    int maxSum=INT_MIN;
    int max(int a, int b){
        if(a>b) return a;
        return b;
    }
    int maxPathSum(TreeNode* root) {
        int x=func(root);
        return maxSum;
    }
    int func(TreeNode* root){
        if(!root) return 0;
        int l=max(func(root->left),0);
        int r=max(func(root->right),0);
        maxSum=max(root->val+l+r,maxSum);
        return root->val+max(l,r);
    }
};
