/*
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void pathsumnikalo(vector<int> res,vector<vector<int>> &result,TreeNode *root,int sum){
        if(!root) return;
        
        res.push_back(root->val);
        
        if(!root->left&&!root->right)
        if(root->val==sum) {
            //res.push_back(root->val); ->nhi, galat he
            vector<int> temp(res.begin(),res.end());
            result.push_back(temp);
            //res.clear(); ->nhi, galat he
        }
        
        if(root->left) {
            pathsumnikalo(res,result,root->left,sum-(root->val));
        }
        if(root->right) {
            pathsumnikalo(res,result,root->right,sum-(root->val));
        }
        
        //res.erase(res.end()-1);
        res.pop_back();
    }
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> result;
        if(!root) return result;
        vector<int> res;
        pathsumnikalo(res,result,root,sum);
        return result;
    }
};
