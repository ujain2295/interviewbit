/*
Find out the maximum sub-array of non negative numbers from an array.
The sub-array should be continuous. That is, a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array. Sub-array A is greater than sub-array B if sum(A) > sum(B).

Example:

A : [1, 2, 5, -7, 2, 3]
The two sub-arrays are [1, 2, 5] [2, 3].
The answer is [1, 2, 5] as its sum is larger than [2, 3]
NOTE: If there is a tie, then compare with segment's length and return segment which has maximum length
NOTE 2: If there is still a tie, then return the segment with minimum starting index
*/

vector<int> Solution::maxset(vector<int> &A) {
    int I=-1,J=-1,j=0,i=0,n=A.size(),sum=0,maxsum=0;
    for(;j<n;j++){
        if(A[i]<0) {
            if(sum>maxsum) {
                maxsum=sum;
                I=i;J=j;
            }
            sum=0;
            i=j+1;
        }
        sum+=A[j];
    }
    if(I==-1&&J==-1) return A;
    if(i>=n) {
        vector<int> X;
        return X;
    }
    vector<int> X(A.begin()+I,A.begin()+J);
    return X;
}
