/*
Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int lth(ListNode *head){
        if(!head) return 0;
        return 1+lth(head->next);
    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int l=lth(head);
        ListNode* dummyhead=new ListNode(-1);
        dummyhead->next=head;
        ListNode *p=dummyhead;
        for(int i=0;i<l-n;i++){
            p=p->next;
        }
        ListNode *temp=p->next;
        p->next=p->next->next;
        delete temp;
        return dummyhead->next;
    }
};

class Solution(object):
    def removeNthFromEnd(self, head, n):
        """
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        """
        dummy = ListNode(-1)
        dummy.next = head
        slow, fast = dummy, dummy
        
        for i in xrange(n):
            fast = fast.next
            
        while fast.next:
            slow, fast = slow.next, fast.next
            
        slow.next = slow.next.next
        
        return dummy.next
