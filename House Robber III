/*
The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:
     3
    / \
   2   3
    \   \ 
     3   1
Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:
     3
    / \
   4   5
  / \   \ 
 1   3   1
Maximum amount of money the thief can rob = 4 + 5 = 9.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        if(root == NULL)
            return 0;
        pair<int,int> result=helper(root);
        return max(result.first, result.second);
    }
 
    pair <int,int> helper(TreeNode* root){
        if(root == NULL){
            pair<int,int> result=make_pair(0,0);
        return result;
    }
 
    pair<int,int> result;
    pair<int,int> left = helper(root->left);
    pair<int,int> right = helper (root->right);
 
    // result[0] is when root is selected, result[1] is when not. 
    result.first = root->val + left.second + right.second;
    result.second = max(left.first, left.second) + max(right.first, right.second);
    return result;
}
};
