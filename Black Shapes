/*
Given N * M field of O's and X's, where O=white, X=black
Return the number of black shapes. A black shape consists of one or more adjacent X's (diagonals not included)

Example:

OOOXOOO
OOXXOXO
OXOOOXO

answer is 3 shapes are  :
(i)    X
     X X
(ii)
      X
 (iii)
      X
      X
Note that we are looking for connected shapes here.

For example,

XXX
XXX
XXX
is just one single connected black shape.
*/

void dfs(int i,int j,int r,int c,vector<vector<int>> &arr,vector<vector<int>> &visited){
    if (i < 0 || i > r-1) return;
    if (j <0 || j > c-1) return;
    if (arr[i][j] == 0 || visited[i][j]) return;
    visited[i][j]=true;
    dfs(i+1,j,r,c,arr,visited);
    dfs(i-1,j,r,c,arr,visited);
    dfs(i,j+1,r,c,arr,visited);
    dfs(i,j-1,r,c,arr,visited);
}
int solve(int r,int c,vector<vector<int>> &visited,vector<vector<int>> &arr){
    int cnt=0;
    for(int i=0;i<r;i++){
        for(int j=0;j<c;j++){
            if(arr[i][j]==1&&visited[i][j]==0){
                dfs(i,j,r,c,arr,visited);
                cnt++;
            }
        }
    }
    return cnt;
}
int Solution::black(vector<string> &A) {
    int i=0,j=0,r=A.size(),c=A[0].size();
    vector<vector<int>> arr(r, vector<int>(c)),visited(r, vector<int>(c));
    for(;i<r;i++){
        for(j=0;j<c;j++){
            visited[i][j]=false;
            if(A[i][j]=='X')
                arr[i][j]=1;
            else arr[i][j]=0;
        }
    }
    return solve(r,c,visited,arr);
}
