/*
Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

For example, given the following matrix:

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 6.
*/

class Solution {
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        if(matrix.size()==0) return 0;
        int n=matrix.size(),m=matrix[0].size(),maxar=0;
        vector<vector<int>> arr(n,vector<int>(m));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(matrix[i][j]=='0') arr[i][j]=0;
                else if(i==0) arr[i][j]=1;
                else arr[i][j]=arr[i-1][j]+1;
            }
            maxar=max(maxar,largestRectangleArea(arr[i]));
        }
        return maxar;
    }
    int largestRectangleArea(vector<int>& heights) {
        //if(heights.size()==1) return heights[heights.size()-1];
        heights.push_back(0);
        stack<int> stk;
        int maxar=0;
        for(int i=0,l=heights.size();i<l;i++){
            while(!stk.empty() && heights[stk.top()]>heights[i]){
                int h=heights[stk.top()];
                stk.pop();
                int ltidx= stk.empty()? -1:stk.top();
                maxar=max(maxar,h*(i-ltidx-1));
            }
            stk.push(i);
        }
        return maxar;
    }
};
