/*
Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
*/

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int SUM=0,sum=0,minis=INT_MAX;
        if(nums.size()<=3){
            for(int i=0;i<nums.size();i++){
                sum+=nums[i];
            }
            return sum;
        }
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size()-2;i++){
            int l=i+1,r=nums.size()-1;
            while(l<r){
                sum=nums[i]+nums[l]+nums[r];
                if(abs(sum-target)<minis) {
                    minis=abs(sum-target);
                    SUM=sum;
                }
                else if(sum<target){
                    l++;
                }
                else{
                    r--;
                }
            }
        }
        return SUM;
    }
};
