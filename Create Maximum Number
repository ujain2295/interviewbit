/*
Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.

Example 1:
nums1 = [3, 4, 6, 5]
nums2 = [9, 1, 2, 5, 8, 3]
k = 5
return [9, 8, 6, 5, 3]

Example 2:
nums1 = [6, 7]
nums2 = [6, 0, 4]
k = 5
return [6, 7, 6, 0, 4]

Example 3:
nums1 = [3, 9]
nums2 = [8, 9]
k = 3
return [9, 8, 9]
*/

vector<int> maxArray(vector<int> nums, int k){
                vector<int> res(k);
                stack<int> stack;
                for(int i = 0 ;i < nums.size(); i++){

                    while(!stack.empty() && nums.size() - i + stack.size() > k && nums[i] > stack.top())stack.pop();

                    if(stack.size() < k)stack.push(nums[i]);
                }
            while(!stack.empty()){

                res[k-1] = stack.top();
                stack.pop();
                k--;
            }
            return res;
        }

        vector<int> merge(vector<int> nums1, vector<int> nums2, int k){
            vector<int> res(k);
            for(int i = 0,j= 0,l =0; l < k; l++){
                res[l] = greaterArray(nums1,nums2,i,j) ? nums1[i++]:nums2[j++];
            }
            return res;
        }

        bool greaterArray(vector<int> nums1, vector<int> nums2, int i, int j){
            while(i < nums1.size() && j < nums2.size() && nums1[i] == nums2[j]){
                i++;
                j++;
            }

            return j == nums2.size() || (i < nums1.size() && nums1[i] > nums2[j]);
        }
        vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {

            vector<int> ans(k,INT_MIN);
            for(int i = max(0,k-(int)nums2.size()); i <= k && i <= nums1.size(); i++){
                vector<int> tmp = merge(maxArray(nums1,i),maxArray(nums2,k-i),k);
                if(greaterArray(tmp,ans,0,0))ans = tmp;
            }
            return ans;
        }
