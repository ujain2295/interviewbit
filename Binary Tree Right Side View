/*
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        queue<pair<TreeNode*,int>> que;
        vector<int> result;
        vector<int> res;
        if(!root) return result;
        que.push(make_pair(root,1));
        int level=1;
        while(!que.empty()){
            pair<TreeNode*,int> temp=que.front();
            que.pop();
            if(temp.second!=level){
                //result.push_back(res);
                result.push_back(res[res.size()-1]);
                res.clear();
                level=temp.second;
            }
            res.push_back(temp.first->val);
            if(temp.first->left){
                que.push(make_pair(temp.first->left,temp.second+1));
            }
            if(temp.first->right){
                que.push(make_pair(temp.first->right,temp.second+1));
            }
        }
        //result.push_back(res);
        result.push_back(res[res.size()-1]);
        return result;
    }
};
