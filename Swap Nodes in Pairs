/*
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(!head) return NULL;
        ListNode* dummyhead=new ListNode(-1);
        dummyhead->next=head;
        ListNode *p=dummyhead,*q1,*q2;
        while(p->next&&p->next->next){
            q1=p->next;
            q2=q1->next;
            q1->next=q2->next;
            q2->next=q1;
            p->next=q2;
            p=q1;
        }
        return dummyhead->next;
    }
};
