# Time:  O(1), amortized
# Space: O(n)

/*
Implement the following operations of a queue using stacks.

push(x) -- Push element x to the back of queue.
pop() -- Removes the element from in front of queue.
peek() -- Get the front element.
empty() -- Return whether the queue is empty.
Notes:
You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).
*/

class Queue {
	stack<int> input, output;
public:
	void push(int x) {
		input.push(x);
	}
	void pop(void) {
		peek();
		output.pop();
	}
	int peek(void) {
		if (output.empty())
		while (input.size()){
		    output.push(input.top());
		    input.pop();
		}
		return output.top();
	}
	bool empty(void) {
		return input.empty() && output.empty();
	}
};

class Queue(object):
    def __init__(self):
        """
        initialize your data structure here.
        """
        self.st1 = []
        self.st2 = []
         
 
    def push(self, x):
        """
        :type x: int
        :rtype: nothing
        """
        self.st1.append(x)
         
 
    def pop(self):
        """
        :rtype: nothing
        """
        self.peek()
        self.st2.pop()
                 
 
    def peek(self):
        """
        :rtype: int
        """   
        if len(self.st2) == 0:
            while len(self.st1) != 0:
                self.st2.append(self.st1.pop())
        return self.st2[-1]
         
 
    def empty(self):
        """
        :rtype: bool
        """
        return not self.st1 and not self.st2
