/*
After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.
*/

class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        if(n==1) return nums[0];
        return max(robpurana(nums,0,n-2),robpurana(nums,1,n-1));
    }
private:
    int max(int a, int b){
        if(a>b) return a;
        return b;
    }
    int robpurana(vector<int> &num, int l, int r) {
		int a = 0;
		int b = 0;
		for (int i=l; i<=r; i++){
			if (i%2==0)
				a = max(a+num[i], b);
			else
				b = max(a, b+num[i]);
		}
		return max(a, b);
	}
};
