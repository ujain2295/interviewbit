/*
Given two sequences S, T, count number of unique ways in sequence S, to form a subsequence that is identical to the sequence T.

 Subsequence : A subsequence of a string is a new string which is formed from the original string by deleting some (can be none ) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not). 
Example :
 S = "rabbbit" T = "rabbit" 

Return 3. And the formations as follows:

S1= "ra_bbit" 
S2= "rab_bit" 
S3="rabb_it"
"_" marks the removed character.
*/

int Solution::numDistinct(string S, string T) {
    int lenT=T.size();
    int lenS=S.size();
    vector<vector<int>> X(lenT+1,vector<int>(lenS+1,0));
    for(int i=0;i<=lenS;i++){
        X[0][i]=1;
    }
    for(int i=1;i<=lenT;i++){
        for(int j=1;j<=lenS;j++){
            if(S[j-1]!=T[i-1]){
                X[i][j]=X[i][j-1];
            }
            else{
                X[i][j]=X[i][j-1]+X[i-1][j-1];
            }
        }
    }
    return X[lenT][lenS];
}
