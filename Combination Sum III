/*
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]
*/

class Solution {
public:
    int K;
    vector<vector<int>> combinationSum3(int k, int n) {
        set<vector<int>> result;
        K=k;
        //int L=candidates.size();
        //sort(candidates.begin(),candidates.end());
        vector<int> candidates(9);
        for(int i=0;i<9;i++){
            candidates[i]=i+1;
        }
        vector<int> res;
        func(n,res,result,candidates,0);
        return vector<vector<int>> (result.begin(),result.end());
    }
    void func(int target,vector<int> res,set<vector<int>> &result,vector<int> &candidates,int i){
        
        if(target==0){
            if(res.size()==K)
                result.insert(res);
            return;
        }
        
        if(target<0) return;
        
        for(int l=candidates.size();i<l;i++){
            if(target<candidates[i]) break;
            res.push_back(candidates[i]);
            func(target-candidates[i],res,result,candidates,i+1);
            res.pop_back();
        }
        
    }
};
