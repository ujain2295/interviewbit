/*
Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.
*/

class TrieNode {
public:
    // Initialize your data structure here.
    TrieNode():isWord(false) { } 
    unordered_map<char,TrieNode*> children;
    bool isWord;
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string word) {
        if(word.size()<=0) return;
        TrieNode *node=root;
        for(int i=0;i<word.size();i++){
            if(node->children.find(word[i])==node->children.end())
                node->children[word[i]]=new TrieNode();
            node=node->children[word[i]];
        }
        node->isWord=true;
    }

    // Returns if the word is in the trie.
    bool search(string word) {
        if(word.size()<=0) return false;
        TrieNode *node=root;
        for(int i=0;i<word.size();i++){
            if(node->children.find(word[i])==node->children.end())
                return false;
            node=node->children[word[i]];
        }
        return node->isWord;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
        if(prefix.size()<=0) return false;
        TrieNode *node=root;
        for(int i=0;i<prefix.size();i++){
            if(node->children.find(prefix[i])==node->children.end())
                return false;
            node=node->children[prefix[i]];
        }
        return true;
    }

private:
    TrieNode* root;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");
