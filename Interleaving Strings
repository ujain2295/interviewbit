/*
Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

Example,
Given:

s1 = "aabcc",
s2 = "dbbca",
When s3 = "aadbbcbcac", return true.
When s3 = "aadbbbaccc", return false.

Return 0 / 1 ( 0 for false, 1 for true ) for this problem
*/

int Solution::isInterleave(string A, string B, string C) {
    int lenC=C.size();
    int lenA=A.size();
    int lenB=B.size();
    if(lenC!=(lenA+lenB)) return false;
    bool RC[lenA+1][lenB+1];
    memset(RC, 0, sizeof(RC));
    for(int i=0;i<=lenA;i++){
        for(int j=0;j<=lenB;j++){
            if(i==0&&j==0) RC[i][j]=true;
            else if((i==0&&B[j-1]==C[j-1])){
                RC[i][j]=RC[i][j-1];
            }
            else if((j==0&&A[i-1]==C[i-1])){
                RC[i][j]=RC[i-1][j];
            }
            else if(A[i-1]==C[i+j-1]&&B[j-1]!=C[i+j-1]){
                RC[i][j]=RC[i-1][j];
            }
            else if(A[i-1]!=C[i+j-1]&&B[j-1]==C[i+j-1]){
                RC[i][j]=RC[i][j-1];
            }
            else if(A[i-1]==C[i+j-1] && B[j-1]==C[i+j-1]){
                RC[i][j]=RC[i-1][j]||RC[i][j-1];
            }
        }
    }
    return RC[lenA][lenB];
    //RC.clear();
}
