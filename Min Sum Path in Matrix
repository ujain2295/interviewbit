/*
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

 Note: You can only move either down or right at any point in time. 
Example :

Input : 

    [  1 3 2
       4 3 1
       5 6 1
    ]

Output : 8
     1 -> 3 -> 2 -> 1 -> 1
*/

int min(int a, int b){
    if(a<b) return a;
    else return b;
}
int Solution::minPathSum(vector<vector<int> > &A) {
    for(int i=0,L=A.size();i<L;i++){
        for(int j=0,l=A[i].size();j<l;j++){
            if(i==0&&j==0) continue;
            if(i==0) {A[i][j]+=A[i][j-1]; continue;}
            if(j==0) {A[i][j]+=A[i-1][j]; continue;}
            A[i][j]+=min(A[i][j-1],A[i-1][j]);
        }
    }
    return A[A.size()-1][A[A.size()-1].size()-1];
}
