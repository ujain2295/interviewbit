/*
Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).
*/

class Solution_N {
public:
	int minSubArrayLen(int s, vector<int>& nums) {
		int n = nums.size(), start = 0, sum = 0, minlen = INT_MAX;
		for (int i = 0; i < n; i++) {
			sum += nums[i];
			while (sum >= s) {
				minlen = min(minlen, i - start + 1);
				sum -= nums[start++];
			}
		}
		return minlen == INT_MAX ? 0 : minlen;
	}
};

class Solution_NlogN {
public:
	int minSubArrayLen(int s, vector<int>& nums) {
		vector<int> sums = accumulate(nums);
		int n = nums.size(), minlen = INT_MAX;
		for (int i = 1; i <= n; i++) {
			if (sums[i] >= s) {
				int p = upper_bound(sums, 0, i, sums[i] - s);
				if (p != -1) minlen = min(minlen, i - p + 1);
			}
		}
		return minlen == INT_MAX ? 0 : minlen;
	}
private:
	vector<int> accumulate(vector<int>& nums) {
		int n = nums.size();
		vector<int> sums(n + 1, 0);
		for (int i = 1; i <= n; i++)
		sums[i] = nums[i - 1] + sums[i - 1];
		return sums;
	}
	int upper_bound(vector<int>& sums, int left, int right, int target) {
		int l = left, r = right;
		while (l < r) {
			int m = l + ((r - l) >> 1);
			if (sums[m] <= target) l = m + 1;
			else r = m;
		}
		return sums[r] > target ? r : -1;
	}
};
