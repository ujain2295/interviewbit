/*
Given a grid of size m * n, lets assume you are starting at (1,1) and your goal is to reach (m,n). At any instance, if you are on (x,y), you can either go to (x, y + 1) or (x + 1, y).

Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Example :
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

 Note: m and n will be at most 100. 
*/

int Solution::uniquePathsWithObstacles(vector<vector<int> > &A) {
    int i,j,n=A.size(),m=A[0].size();
    int x[n][m];
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            if(A[i][j]==1)
                x[i][j]=0;
            else if(i==0&&j==0)
                x[i][j]=1;
            else if(i==0)
                x[i][j]=x[i][j-1];
            else if(j==0)
                x[i][j]=x[i-1][j];
            else
                x[i][j]=x[i-1][j]+x[i][j-1];
        }
    }
    return x[n-1][m-1];
}
