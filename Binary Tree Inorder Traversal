/*
Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree [1,null,2,3],
   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
        if(!root) return result;
        stack<TreeNode*> stk;
        stk.push(root);
        while(!stk.empty()){
            TreeNode* temp= stk.top();
            if(temp->left){
                stk.push(temp->left);
                temp->left=NULL;
            }
            else{
                result.push_back(temp->val);
                stk.pop();
                if(temp->right) stk.push(temp->right);
            }
        }
        return result;
    }
};
// class Solution {
//     public:
//     vector<int> res;
//     void INT(TreeNode* root){
//         if(root==NULL) return;
//         INT(root->left);
//         res.push_back(root->val);
//         INT(root->right);
//     }
//     vector<int> inorderTraversal(TreeNode* root) {
//         res.clear();
//         INT(root);
//         return res;
//     }
// };
