/*
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].
*/

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        sort( intervals.begin( ), intervals.end( ), [ ]( const Interval& lhs, const Interval& rhs ){
            if(lhs.start!=rhs.start) return lhs.start < rhs.start;
            else return lhs.end < rhs.end;
        });
        vector<Interval> result;
        int n=intervals.size();
        if(n==0) return result;
        Interval pre=intervals[0];
        for(int i=0;i<n;i++){
            if(intervals[i].start>pre.end){
                result.push_back(pre);
                pre=intervals[i];
            }
            else{
                pre.end=max(pre.end,intervals[i].end);
            }
        }
        result.push_back(pre);
        return result;
    }
};
