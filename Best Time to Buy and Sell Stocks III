/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Example :

Input : [1 2 1 2]
Output : 2

Explanation : 
  Day 1 : Buy 
  Day 2 : Sell
  Day 3 : Buy
  Day 4 : Sell
*/

int max(int a,int b){
    if(a<b) return b;
    else return a;
}

int Solution::maxProfit(const vector<int> &prices) {
    int hold1=INT_MIN, hold2=INT_MIN, release1=0, release2=0;
    for(int i:prices){
        release2=max(release2, hold2+i);
        hold2=max(hold2,release1-i);
        release1=max(release1, hold1+i);
        hold1=max(hold1, -i);
    }
    return release2;
}
