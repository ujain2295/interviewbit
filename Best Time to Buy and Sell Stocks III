/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Example :

Input : [1 2 1 2]
Output : 2

Explanation : 
  Day 1 : Buy 
  Day 2 : Sell
  Day 3 : Buy
  Day 4 : Sell
*/

int max(int a,int b){
    if(a<b) return b;
    else return a;
}
int Solution::maxProfit(const vector<int> &prices) {
    int len=prices.size();
    if(len==0) return 0;
    vector<int> profitHist(len);
    for (int buyDay=0, today=1; today<len; ++today) {  
     int curP = prices[today] - prices[buyDay];  
     if (curP <= 0) buyDay = today;  
     else profitHist[today] = max(curP, profitHist[today-1]);  
   }  
   // backward calculate profit  
   int profit=profitHist[len-1], backProfit=0;  
   for (int today=len-2, sellDay=len-1; today>0; --today) {  
     int curP = prices[sellDay] - prices[today];  
     if (curP <= 0) sellDay = today;  
     else backProfit = max(curP, backProfit);  
     profit = max(profit, profitHist[today]+backProfit);  
   }  
   return profit;  
}
