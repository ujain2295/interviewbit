/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        queue<pair<TreeNode*,int>> que;
        vector<vector<int>> result;
        vector<int> res;
        if(!root) return result;
        que.push(make_pair(root,1));
        int level=1;
        while(!que.empty()){
            pair<TreeNode*,int> temp=que.front();
            que.pop();
            if(temp.second!=level){
                result.push_back(res);
                res.clear();
                level=temp.second;
            }
            res.push_back(temp.first->val);
            if(temp.first->left){
                que.push(make_pair(temp.first->left,temp.second+1));
            }
            if(temp.first->right){
                que.push(make_pair(temp.first->right,temp.second+1));
            }
        }
        result.push_back(res);
        reverse(result.begin(),result.end());
        return result;
    }
    
};
