/*
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<pair<TreeNode*,int>> que;
        vector<vector<int>> result;
        vector<int> res;
        if(!root) return result;
        que.push(make_pair(root,1));
        int level=1;
        while(!que.empty()){
            pair<TreeNode*,int> temp=que.front();
            que.pop();
            if(temp.second!=level){
                result.push_back(res);
                //result.push_back(res[res.size()-1]);
                res.clear();
                level=temp.second;
            }
            res.push_back(temp.first->val);
            if(temp.first->left){
                que.push(make_pair(temp.first->left,temp.second+1));
            }
            if(temp.first->right){
                que.push(make_pair(temp.first->right,temp.second+1));
            }
        }
        result.push_back(res);
        //result.push_back(res[res.size()-1]);
        return result;
    }
    
};

class Solution2 {
public:

vector<vector<int>>result;
    
int max(int a, int b){
    if(a>b) return a;
    return b;
}
int height(TreeNode* root){
    if(root==NULL) return 0;
    return max(height(root->left),height(root->right))+1;
}

vector<vector<int>> levelOrder(TreeNode* root)
{
    int h = height(root);
    int i;
    result.clear();
    for (i=1; i<=h; i++){
        vector<int> x;
        printGivenLevel(root, i, x);
        result.push_back(x);
    }
    return result;
}
 
void printGivenLevel(TreeNode* root, int level, vector<int> &res)
{
    if (root == NULL)
        return;
    if (level == 1){
        res.push_back(root->val);
    }
    else if (level > 1)
    {
        printGivenLevel(root->left, level-1, res);
        printGivenLevel(root->right, level-1, res);
    }
}

};
