/*
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
*/

class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& num) {
        set<vector<int> > res;
        perm(num,0,(num.size()-1),res);
        return vector<vector<int> > (res.begin(),res.end());
    }
    void perm(vector<int> num,int k,int n, set<vector<int> > &res){
        if (k==n){
            res.insert(num);
        }else{
            for (int i=k;i<=n;i++){
                int tmp = num[k];
                num[k]=num[i];
                num[i]=tmp;
                
                perm(num,k+1,n,res);
                
                tmp = num[k];
                num[k]=num[i];
                num[i]=tmp;
            }
        }
    }
};
