/*
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

For example,
[1,1,2] have the following unique permutations:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
*/

class SolutionLeetCode {
public:
    void perm(vector<int> num,int k, vector<vector<int> > &res){
        if(k>=num.size()){
            res.push_back(num);
            return;
        }
        for(int i=k;i<num.size();i++){
            if(i!=k && num[i]==num[k]) continue;
            swap(num[k],num[i]);
            perm(num,k+1,res);
            //swap(num[k],num[i]);
        }
    }

    vector<vector<int> > permuteUnique(vector<int> &num) {
        sort(num.begin(),num.end());
        vector<vector<int>> res;
        perm(num,0,res);
        return res;
    }
};

class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& num) {
        set<vector<int> > res;
        perm(num,0,(num.size()-1),res);
        return vector<vector<int> > (res.begin(),res.end());
    }
    void perm(vector<int> num,int k,int n, set<vector<int> > &res){
        if (k==n){
            res.insert(num);
        }else{
            for (int i=k;i<=n;i++){
                int tmp = num[k];
                num[k]=num[i];
                num[i]=tmp;
                
                perm(num,k+1,n,res);
                
                tmp = num[k];
                num[k]=num[i];
                num[i]=tmp;
            }
        }
    }
};

class Solution {
public:
    bool noswap(int k, int i, const vector<int> num){
        for (int j=k;j<i;j++){
            if (num[j]==num[i]){
                return true;
            }
        }
        return false;
    }
 
    void perm(vector<int> num,int k,int n, vector<vector<int> > &res){
        if (k==n){
            res.push_back(num);
        }else{
            for (int i=k;i<=n;i++){
                 
                if (noswap(k,i,num)){continue;}
                 
                int tmp = num[k];
                num[k]=num[i];
                num[i]=tmp;
                 
                perm(num,k+1,n,res);
                 
                tmp = num[k];
                num[k]=num[i];
                num[i]=tmp;
            }
        }
    }
    vector<vector<int> > permuteUnique(vector<int> &num) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > res;
        perm(num,0,(num.size()-1),res);
        return res;
    }
};
