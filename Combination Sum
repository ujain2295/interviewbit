/*
Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]
*/

class Solution {
public:
    
    void func(int target,vector<int> res,set<vector<int>> &result,vector<int> &candidates,int i){
        
        if(target==0){
            result.insert(res);
            return;
        }
        
        if(target<0) return;
        
        for(int l=candidates.size();i<l;i++){
            if(target<candidates[i]) break;
            res.push_back(candidates[i]);
            func(target-candidates[i],res,result,candidates,i);
            res.pop_back();
        }
        
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        set<vector<int>> result;
        int L=candidates.size();
        sort(candidates.begin(),candidates.end());
        vector<int> res;
        func(target,res,result,candidates,0);
        return vector<vector<int>> (result.begin(),result.end());
    }
};
