/*
Given a sorted array of integers, find the number of occurrences of a given target value.
Your algorithmâ€™s runtime complexity must be in the order of O(log n).
If the target is not found in the array, return 0

**Example : **
Given [5, 7, 7, 8, 8, 10] and target value 8,
return 2.

PROBLEM APPROACH :

For complete solution, look at the hint.
*/

int Solution::findCount(const vector<int> &A, int B) {
    int low=0,high=A.size()-1,result1=-1,result2=-1;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(A[mid]==B)
        {
            result1=mid;
            high=mid-1;
        }
        else if(B<A[mid]) high=mid-1;
        else low=mid+1;
    }
    low=0;high=A.size()-1;
    while(low<=high)
    {
        int mid=(low+high)/2;
        if(A[mid]==B)
        {
            result2=mid;
            low=mid+1;
        }
        else if(B<A[mid]) high=mid-1;
        else low=mid+1;
    }
    if(result1+result2==-2) return 0;
    if(result1==-1) return result2;
    else if(result2==-1) return result1;
    else return result2-result1+1;
}
