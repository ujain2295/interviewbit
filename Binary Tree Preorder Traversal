/*
Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,2,3].

Note: Recursive solution is trivial, could you do it iteratively?
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /*void POT(TreeNode* root,vector<int> &result){
        if(!root) {
            return;
        }
        result.push_back(root->val);
        POT(root->left,result);
        POT(root->right,result);
        //result.erase(result.end());
    }
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> result;
        if(!root) return result;
        POT(root,result);
        return result;
    }*/
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> result;
        stack<TreeNode*> X;
        while(!X.empty()||root){
            if(!root){
                root=X.top();
                X.pop();
            }
            else{
                result.push_back(root->val);
                X.push(root->right);
                root=root->left;
            }
        }
        return result;
    }
};
