/*
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]

You should return [1,2,3,6,9,8,7,4,5].
*/

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if(matrix.size()==0){
            return vector<int>();
        }
        int l=0,t=0,r=matrix[0].size()-1,b=matrix.size()-1;
        vector<int> res(matrix[0].size()*matrix.size());
        int k=0,d=0;
        while(k<res.size()){
            if(d==0){
                for(int i=l;i<=r;i++){
                    res[k++]=matrix[t][i];
                }
                t++;
                d++;
            }
            else if(d==1){
                for(int i=t;i<=b;i++){
                    res[k++]=matrix[i][r];
                }
                r--;
                d++;
            }
            else if(d==2){
                for(int i=r;i>=l;i--){
                    res[k++]=matrix[b][i];
                }
                b--;
                d++;
            }
            else if(d==3){
                for(int i=b;i>=t;i--){
                    res[k++]=matrix[i][l];
                }
                l++;
                d=0;
            }
        }
        return res;
    }
};
