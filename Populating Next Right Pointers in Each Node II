/*
Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL
*/

/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
    if(!root) return;
        queue<pair<TreeLinkNode *,int>> que;
        pair<TreeLinkNode *,int> temp;
        que.push(make_pair(root,0));
        //int level=0;
        while(!que.empty()){
            temp=que.front();
            que.pop();
            
            if(!que.empty()&&que.front().second==temp.second){
                temp.first->next=que.front().first;
            }
            
            if(temp.second!=que.front().second){
                temp.first->next=NULL;
            }
            if(temp.first->left){
                que.push(make_pair(temp.first->left,temp.second+1));
            }
            if(temp.first->right){
                que.push(make_pair(temp.first->right,temp.second+1));
            }
        }
        temp.first->next=NULL;
    }
};
