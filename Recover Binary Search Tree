/*
Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Note:
A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

#define null NULL

class Solution {
	TreeNode* firstElement = null;
	TreeNode* secondElement = null;
	TreeNode* prevElement = new TreeNode(INT_MIN);
	public:
	void recoverTree(TreeNode* root) {
		traverse(root);
		int temp = firstElement->val;
		firstElement->val = secondElement->val;
		secondElement->val = temp;
	}
	private:
	void traverse(TreeNode* root) {
		if (root == null) return;
		traverse(root->left);
		
		if (firstElement == null && prevElement->val >= root->val) {
			firstElement = prevElement;
		}
		if (firstElement != null && prevElement->val >= root->val) {
			secondElement = root;
		}
		prevElement = root;
		
		traverse(root->right);
	}
};
